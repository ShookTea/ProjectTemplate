stages:
  - preinstall
  - install
  - test
  - build

##############
# PREINSTALL #
##############

php_image:
  stage: preinstall
  image: docker:latest
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  only:
    - master
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - cd images/php-dev
    - docker build -t ${GITLAB_REPO}/php-dev .
    - docker push ${GITLAB_REPO}/php-dev

###########
# INSTALL #
###########

front_dep:
  stage: install
  image: node:12.13.0-alpine
  script:
    - cd frontend
    - npm ci
  artifacts:
    paths:
      - frontend/node_modules
    expire_in: 1 hour

back_dep:
  stage: install
  image: ${GITLAB_REPO}/php-dev
  script:
    - cd backend
    - composer install
  artifacts:
    paths:
      - backend/vendor
    expire_in: 1 hour

########
# TEST #
########

eslint:
  stage: test
  image: node:12.13.0-alpine
  needs: [ "front_dep" ]
  dependencies:
    - install frontend dependencies
  script:
    - cd frontend
    - npm run test:lint

front_unit:
  stage: test
  image: node:12.13.0-alpine
  needs: [ "front_dep" ]
  dependencies:
    - install frontend dependencies
  script:
    - cd frontend
    - npm run test:unit

front_build:
  stage: test
  image: node:12.13.0-alpine
  needs: [ "front_dep" ]
  dependencies:
    - install frontend dependencies
  script:
    - cd frontend
    - npm run build
  artifacts:
    paths:
      - frontend/dist
    expire_in: 1 hour

phpcs:
  stage: test
  image: ${GITLAB_REPO}/php-dev
  needs: [ "back_dep" ]
  dependencies:
    - install backend dependencies
  script:
    - cd backend
    - vendor/bin/phpcs

phpstan:
  stage: test
  image: ${GITLAB_REPO}/php-dev
  needs: [ "back_dep" ]
  dependencies:
    - install backend dependencies
  script:
    - cd backend
    - vendor/bin/phpstan analyse --level max src

phpunit:
  stage: test
  image: ${GITLAB_REPO}/php-dev
  needs: [ "back_dep" ]
  dependencies:
    - install backend dependencies
  services:
    - mysql:8.0.15
  variables:
    MYSQL_DATABASE: "db_name"
    MYSQL_USER: "db_user"
    MYSQL_PASSWORD: "db_password"
    MYSQL_RANDOM_ROOT_PASSWORD: "yes"
    APP_ENV: "test"
    DATABASE_URL: "mysql://db_user:db_password@mysql:3306/db_name?serverVersion=8"
    MAILER_URL: "null://localhost"
  script:
    - cd backend
    - php bin/console cache:warmup
    - php bin/console doctrine:migrations:migrate --allow-no-migration --no-interaction
    - vendor/bin/phpunit --coverage-text
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'

build_master:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  only:
    - master
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t ${GITLAB_REPO}:latest .
    - docker push ${GITLAB_REPO}:latest

build_tag:
  stage: build
  image: docker:latest
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  only:
    - tags
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t "${GITLAB_REPO}:$CI_COMMIT_REF_NAME" .
    - docker push "${GITLAB_REPO}:$CI_COMMIT_REF_NAME"
